version: "3.7"

services:
  # Caddy Reverse Proxy & Webserver
  caddy:
    image: ghcr.io/hoangtheboss/caddy-cloudflare:latest
    restart: unless-stopped
    ports:
      - $BINDIP:80:80
      - $BINDIP:443:443
    networks:
      - caddy-net
    volumes:
      - $WSDIR/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - $MIRRORPATH:/mirror:ro
      - $WSDIR/caddy/data:/data
      - $WSDIR/caddy/config:/config
    environment:
      - CLOUDFLARE_EMAIL=$EMAIL
      - CLOUDFLARE_API_TOKEN=$TOKEN
      - ACME_AGREE=true

  # PGSQL for Authentik
  postgresql:
    image: postgres:12-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    networks:
      caddy-net:
        aliases:
          - postgresql
    volumes:
      - $WSDIR/authentik/database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: $PG_PASS
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    # env_file:
    #   - .env

  # REDIS for Authentik
  redis:
    image: redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    networks:
      caddy-net:
        aliases:
          - redis
    volumes:
      - $WSDIR/authentik/redis:/data

  # Authentik Server
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.8.3}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: $PG_PASS
      AUTHENTIK_SECRET_KEY: $AUTHENTIK_SECRET_KEY
    volumes:
      - $WSDIR/authentik/media:/media
      - $WSDIR/authentik/custom-templates:/templates
    # env_file:
    #   - .env
    # ports:
    #   - "${AUTHENTIK_COMPOSE_PORT_HTTP:-9080}:9000"
    #   - "${AUTHENTIK_COMPOSE_PORT_HTTPS:-9443}:9443"
    networks:
      caddy-net:
        aliases:
          - server
    depends_on:
      - postgresql
      - redis

  # Authentik Worker
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.8.3}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: $PG_PASS
      AUTHENTIK_SECRET_KEY: $AUTHENTIK_SECRET_KEY
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    networks:
      caddy-net:
        aliases:
          - worker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $WSDIR/authentik/media:/media
      - $WSDIR/authentik/certs:/certs
      - $WSDIR/authentik/custom-templates:/templates
    # env_file:
    #   - .env
    depends_on:
      - postgresql
      - redis

# volumes:
#   database:
#   redis:

networks:
  caddy-net:
    name: caddy-net
    driver: bridge
    attachable: true
